# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bitset', [dirname(__file__)])
        except ImportError:
            import _bitset
            return _bitset
        if fp is not None:
            try:
                _mod = imp.load_module('_bitset', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bitset = swig_import_helper()
    del swig_import_helper
else:
    import _bitset
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


EXIT_SUCCESS = _bitset.EXIT_SUCCESS
EXIT_FAILURE = _bitset.EXIT_FAILURE

def min(*args):
  return _bitset.min(*args)
min = _bitset.min

def max(*args):
  return _bitset.max(*args)
max = _bitset.max
class BitmapStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitmapStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitmapStatistics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _bitset.new_BitmapStatistics()
        try: self.this.append(this)
        except: self.this = this
    def getCompressedSize(self): return _bitset.BitmapStatistics_getCompressedSize(self)
    def getUncompressedSize(self): return _bitset.BitmapStatistics_getUncompressedSize(self)
    def getNumberOfDirtyWords(self): return _bitset.BitmapStatistics_getNumberOfDirtyWords(self)
    def getNumberOfCleanWords(self): return _bitset.BitmapStatistics_getNumberOfCleanWords(self)
    def getNumberOfMarkers(self): return _bitset.BitmapStatistics_getNumberOfMarkers(self)
    def getOverRuns(self): return _bitset.BitmapStatistics_getOverRuns(self)
    __swig_setmethods__["totalliteral"] = _bitset.BitmapStatistics_totalliteral_set
    __swig_getmethods__["totalliteral"] = _bitset.BitmapStatistics_totalliteral_get
    if _newclass:totalliteral = _swig_property(_bitset.BitmapStatistics_totalliteral_get, _bitset.BitmapStatistics_totalliteral_set)
    __swig_setmethods__["totalcompressed"] = _bitset.BitmapStatistics_totalcompressed_set
    __swig_getmethods__["totalcompressed"] = _bitset.BitmapStatistics_totalcompressed_get
    if _newclass:totalcompressed = _swig_property(_bitset.BitmapStatistics_totalcompressed_get, _bitset.BitmapStatistics_totalcompressed_set)
    __swig_setmethods__["runningwordmarker"] = _bitset.BitmapStatistics_runningwordmarker_set
    __swig_getmethods__["runningwordmarker"] = _bitset.BitmapStatistics_runningwordmarker_get
    if _newclass:runningwordmarker = _swig_property(_bitset.BitmapStatistics_runningwordmarker_get, _bitset.BitmapStatistics_runningwordmarker_set)
    __swig_setmethods__["maximumofrunningcounterreached"] = _bitset.BitmapStatistics_maximumofrunningcounterreached_set
    __swig_getmethods__["maximumofrunningcounterreached"] = _bitset.BitmapStatistics_maximumofrunningcounterreached_get
    if _newclass:maximumofrunningcounterreached = _swig_property(_bitset.BitmapStatistics_maximumofrunningcounterreached_get, _bitset.BitmapStatistics_maximumofrunningcounterreached_set)
    __swig_destroy__ = _bitset.delete_BitmapStatistics
    __del__ = lambda self : None;
BitmapStatistics_swigregister = _bitset.BitmapStatistics_swigregister
BitmapStatistics_swigregister(BitmapStatistics)

class Bitset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bitset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bitset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bs"] = _bitset.Bitset_bs_set
    __swig_getmethods__["bs"] = _bitset.Bitset_bs_get
    if _newclass:bs = _swig_property(_bitset.Bitset_bs_get, _bitset.Bitset_bs_set)
    __swig_setmethods__["name"] = _bitset.Bitset_name_set
    __swig_getmethods__["name"] = _bitset.Bitset_name_get
    if _newclass:name = _swig_property(_bitset.Bitset_name_get, _bitset.Bitset_name_set)
    def __init__(self, *args): 
        this = _bitset.new_Bitset(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _bitset.Bitset_set(self, *args)
    def setName(self, *args): return _bitset.Bitset_setName(self, *args)
    def __str__(self): return _bitset.Bitset___str__(self)
    def merge(self, *args): return _bitset.Bitset_merge(self, *args)
    def lower(self, *args): return _bitset.Bitset_lower(self, *args)
    __swig_destroy__ = _bitset.delete_Bitset
    __del__ = lambda self : None;
Bitset_swigregister = _bitset.Bitset_swigregister
Bitset_swigregister(Bitset)

# This file is compatible with both classic and new-style classes.


